{"version":3,"sources":["app.js"],"names":["CalculatorManager","calculator","document","querySelector","keys","display","addEventListener","e","target","matches","key","action","dataset","keyContent","textContent","displayedNum","secondValue","previousKeyType","console","log","Array","from","parentNode","children","forEach","k","classList","remove","firstValue","operator","calcValue","performCalculation","add","includes","modValue","n1","n2","firstNum","parseFloat","secondNum","window","UiEventsHandler","event"],"mappings":"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","file":"app.829868ad.js","sourceRoot":"..","sourcesContent":["export default class CalculatorManager {\r\n  constructor() {}\r\n\r\n  UiEventsHandler() {\r\n    //grabbing the calculator div from DOM  to work with buttons and attach Event Listeners\r\n    const calculator = document.querySelector(`.calculator`);\r\n    //variable to hold all the calculator keys to attach listeners\r\n    const keys = calculator.querySelector(`.calculator__keys`);\r\n    //varaible holds the display screen to show calculation results on screen and to retrieve user input value as well\r\n    const display = calculator.querySelector(`.calculator__display`);\r\n    //attached event listeners to keys\r\n    keys.addEventListener(`click`, (e) => {\r\n      // to confimr if click was to a button and then fetch its action and values further\r\n      if (e.target.matches(`button`)) {\r\n        //retrieve actual target button\r\n        const key = e.target;\r\n        //retrieve the datasent attributes of the button and current display status in constant data types\r\n        const action = key.dataset.action;\r\n        const keyContent = key.textContent;\r\n        const displayedNum = display.textContent;\r\n        let secondValue = displayedNum;\r\n        const previousKeyType = calculator.dataset.previousKeyType;\r\n        console.log(previousKeyType);\r\n        //removing pressed class from the keys if applied\r\n        Array.from(key.parentNode.children).forEach((k) =>\r\n          k.classList.remove(\"is-depressed\")\r\n        );\r\n        //if the button has to action attribute then it is a numeric value\r\n        if (!action) {\r\n          calculator.dataset.previousKeyType = \"number\";\r\n          //if screen was at default zero value or the user is putting the second value of operation clear screen to new value\r\n          if (displayedNum === \"0\" || previousKeyType === \"operator\") {\r\n            display.textContent = keyContent;\r\n          } else {\r\n            display.textContent = displayedNum + keyContent;\r\n          }\r\n        }\r\n        //if user clicks action buttons then following actions sequence should be executed\r\n        if (\r\n          action === \"add\" ||\r\n          action === \"subtract\" ||\r\n          action === \"multiply\" ||\r\n          action === \"divide\"\r\n        ) {\r\n          const firstValue = calculator.dataset.firstValue;\r\n          const operator = calculator.dataset.operator;\r\n          secondValue = displayedNum;\r\n          //first value exists and the operation to be performed exists then do calcualtion\r\n          //but make sure last press of user was not the operator butn or calculate button\r\n          if (\r\n            firstValue &&\r\n            operator &&\r\n            previousKeyType !== \"operator\" &&\r\n            previousKeyType !== \"calculate\"\r\n          ) {\r\n            const calcValue = this.performCalculation(\r\n              firstValue,\r\n              operator,\r\n              secondValue\r\n            );\r\n            //display calculation to screen\r\n            display.textContent = calcValue;\r\n            // Update calculated value as firstValue\r\n            calculator.dataset.firstValue = calcValue;\r\n          } else {\r\n            // If there are no calculations, set displayedNum as the firstValue\r\n            calculator.dataset.firstValue = displayedNum;\r\n          }\r\n          //when user click operator key show it as pressed for better Uesr experience he know which operation he is performing\r\n          key.classList.add(\"is-depressed\");\r\n          calculator.dataset.previousKeyType = \"operator\";\r\n          calculator.dataset.operator = action;\r\n        }\r\n        //if user enters decimal ensure the screen does not contain a decimal already in value\r\n        if (action === \"decimal\") {\r\n          if (!displayedNum.includes(\".\")) {\r\n            display.textContent = displayedNum + \".\";\r\n          } // if it is second value or start of value then show 0. on screen\r\n          else if (\r\n            previousKeyType === \"operator\" ||\r\n            previousKeyType === \"calculate\"\r\n          ) {\r\n            display.textContent = \"0.\";\r\n          }\r\n          //set the previous click key status as decimal\r\n          calculator.dataset.previousKeyType = \"decimal\";\r\n        }\r\n        //if user click clear screen button then clear the based on following conditions\r\n        if (action === \"clear\") {\r\n          //if clear button show AC all clear the remove first value second values and operator value to empty\r\n          if (key.textContent === \"AC\") {\r\n            calculator.dataset.firstValue = \"\";\r\n            calculator.dataset.modValue = \"\";\r\n            calculator.dataset.operator = \"\";\r\n            calculator.dataset.previousKeyType = \"\";\r\n            this.firstValue = \"\";\r\n            this.secondValue = \"\";\r\n          } else {\r\n            key.textContent = \"AC\";\r\n          }\r\n          //set the screen to zero\r\n          display.textContent = 0;\r\n          calculator.dataset.previousKeyType = \"clear\";\r\n        }\r\n        if (action !== \"clear\") {\r\n          const clearButton = calculator.querySelector(\"[data-action=clear]\");\r\n          clearButton.textContent = \"CE\";\r\n        }\r\n        //if user click on calculate operator =\r\n        //then take following actions fetch first,last and operator value from calculator data-set attributes and screen\r\n        if (action === \"calculate\") {\r\n          let firstValue = calculator.dataset.firstValue;\r\n          const operator = calculator.dataset.operator;\r\n          let secondValue = displayedNum;\r\n          //if user again clicks the calculate button previous output will be set as a firsst value\r\n          //and 2nd value will be the last 2nd number which user input befor last calcualtion we save in modValue\r\n          if (firstValue) {\r\n            if (previousKeyType === \"calculate\") {\r\n              firstValue = displayedNum;\r\n              secondValue = calculator.dataset.modValue;\r\n              console.log(\r\n                firstValue + \":\" + secondValue + calculator.dataset.modValue\r\n              );\r\n            }\r\n            //calling calculation method on values\r\n            display.textContent = this.performCalculation(\r\n              firstValue,\r\n              operator,\r\n              secondValue\r\n            );\r\n          }\r\n\r\n          // Set modValue attribute every time users click calcuation button it is saved if user want to repaeat same caluction\r\n          //by clicking calculation button again\r\n          calculator.dataset.modValue = secondValue;\r\n          calculator.dataset.previousKeyType = \"calculate\";\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  // this method performs calculation on given 2 values and the operator and returns output number\r\n  performCalculation(n1, operator, n2) {\r\n    const firstNum = parseFloat(n1);\r\n    const secondNum = parseFloat(n2);\r\n    if (operator === \"add\") return firstNum + secondNum;\r\n    if (operator === \"subtract\") return firstNum - secondNum;\r\n    if (operator === \"multiply\") return firstNum * secondNum;\r\n    if (operator === \"divide\") return firstNum / secondNum;\r\n  }\r\n}\r\n//const calculator = new CalculatorManager();\r\n// //calling method to handle click events\r\n//calculator.UiEventsHandler();\r\nwindow.addEventListener(\"load\", function () {\r\n  //declaring class object\r\n  const calculator = new CalculatorManager();\r\n  // //calling method to handle click events\r\n  calculator.UiEventsHandler();\r\n});\r\nwindow.addEventListener(\"DOMContentLoaded\", (event) => {\r\n  console.log(\"DOM fully loaded and parsed\");\r\n});\r\n"]}